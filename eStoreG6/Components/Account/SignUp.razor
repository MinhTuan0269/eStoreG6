@page "/Account/SignUp"
@using BLL.IServices
@using BLL.Models
@inject NavigationManager Navigation
@inject IAccountService AccountService

<div class="signup-container">
    <div class="signup-card">
        <div class="signup-header">
            <h2 class="signup-title">
                <i class="fas fa-user-plus"></i>
                Create Account
            </h2>
            <p class="signup-subtitle">Join us today and get started</p>
        </div>

        <EditForm Model="@createAccount" OnValidSubmit="HandleValidSubmit" FormName="SignUpForm" class="signup-form">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle"></i>
                    @errorMessage
                </div>
            }

            @if (showSuccess)
            {
                <div class="alert alert-success" role="alert">
                    <i class="fas fa-check-circle"></i>
                    Account created successfully! Redirecting to login...
                </div>
            }

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-envelope"></i>
                        Email Address
                    </label>
                    <InputText @bind-Value="createAccount.Email"
                               class="form-control"
                               placeholder="Enter your email" />
                    <ValidationMessage For="@(() => createAccount.Email)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-lock"></i>
                        Password
                    </label>
                    <div class="password-input-group">
                        <InputText @bind-Value="createAccount.Password"
                                   type="@(showPassword ? "text" : "password")"
                                   class="form-control"
                                   placeholder="Enter your password" />
                        <button type="button"
                                class="password-toggle"
                                @onclick="TogglePasswordVisibility">
                            <i class="fas @(showPassword ? "fa-eye-slash" : "fa-eye")"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => createAccount.Password)" class="validation-message" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-building"></i>
                        Company Name
                    </label>
                    <InputText @bind-Value="createAccount.CompanyName"
                               class="form-control"
                               placeholder="Enter company name" />
                    <ValidationMessage For="@(() => createAccount.CompanyName)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-user-tag"></i>
                        Role
                    </label>
                    <InputSelect @bind-Value="createAccount.RoleId" class="form-control">
                        <option value="">-- Select Role --</option>
                        <option value="1">Admin</option>
                        <option value="2">User</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => createAccount.RoleId)" class="validation-message" />
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-city"></i>
                        City
                    </label>
                    <InputText @bind-Value="createAccount.City"
                               class="form-control"
                               placeholder="Enter city" />
                    <ValidationMessage For="@(() => createAccount.City)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-globe"></i>
                        Country
                    </label>
                    <InputText @bind-Value="createAccount.Country"
                               class="form-control"
                               placeholder="Enter country" />
                    <ValidationMessage For="@(() => createAccount.Country)" class="validation-message" />
                </div>
            </div>

            <div class="form-group-checkbox">
                <label class="checkbox-label">
                    <InputCheckbox @bind-Value="createAccount.Status" class="form-check-input" />
                    <span class="checkmark"></span>
                    <span class="checkbox-text">
                        <i class="fas fa-check-circle"></i>
                        Active Account
                    </span>
                </label>
            </div>

            <div class="form-actions">
                <button type="submit"
                        class="btn btn-primary btn-signup">Sign up</button>

            </div>

            <div class="form-footer">
                <p class="login-link">
                    Already have an account?
                    <a href="/Account/Login" class="link-primary">
                        <i class="fas fa-sign-in-alt"></i>
                        Sign In
                    </a>
                </p>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .signup-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
    }

    .signup-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        width: 100%;
        max-width: 600px;
        animation: slideUp 0.6s ease-out;
    }

    .signup-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 40px 30px;
        text-align: center;
    }

    .signup-title {
        margin: 0 0 10px 0;
        font-size: 2rem;
        font-weight: 700;
    }

        .signup-title i {
            margin-right: 10px;
        }

    .signup-subtitle {
        margin: 0;
        opacity: 0.9;
        font-size: 1.1rem;
    }

    .signup-form {
        padding: 40px 30px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 25px;
    }

    .form-group {
        margin-bottom: 25px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        color: #2d3748;
        font-size: 0.95rem;
    }

        .form-label i {
            margin-right: 8px;
            color: #667eea;
            width: 16px;
        }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e2e8f0;
        border-radius: 10px;
        font-size: 1rem;
        transition: all 0.3s ease;
        background-color: #f8fafc;
    }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            background-color: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

    .password-input-group {
        position: relative;
    }

    .password-toggle {
        position: absolute;
        right: 12px;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        color: #718096;
        cursor: pointer;
        padding: 4px;
        transition: color 0.2s ease;
    }

        .password-toggle:hover {
            color: #667eea;
        }

    .form-group-checkbox {
        margin: 30px 0;
    }

    .checkbox-label {
        display: flex;
        align-items: center;
        cursor: pointer;
        user-select: none;
    }

    .form-check-input {
        margin-right: 12px;
        transform: scale(1.2);
    }

    .checkbox-text {
        color: #2d3748;
        font-weight: 500;
    }

        .checkbox-text i {
            margin-right: 8px;
            color: #48bb78;
        }

    .form-actions {
        margin: 30px 0;
    }

    .btn-signup {
        width: 100%;
        padding: 15px 20px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border: none;
        border-radius: 10px;
        color: white;
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

        .btn-signup:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

    .spinner {
        width: 16px;
        height: 16px;
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-top: 2px solid white;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .form-footer {
        text-align: center;
        margin-top: 30px;
        padding-top: 30px;
        border-top: 1px solid #e2e8f0;
    }

    .login-link {
        margin: 0;
        color: #718096;
    }

    .link-primary {
        color: #667eea;
        text-decoration: none;
        font-weight: 600;
        transition: color 0.2s ease;
    }

        .link-primary:hover {
            color: #764ba2;
            text-decoration: underline;
        }

    .alert {
        padding: 15px 20px;
        border-radius: 10px;
        margin-bottom: 25px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .alert-danger {
        background-color: #fed7d7;
        color: #c53030;
        border: 1px solid #feb2b2;
    }

    .alert-success {
        background-color: #c6f6d5;
        color: #2f855a;
        border: 1px solid #9ae6b4;
    }

    .validation-message {
        color: #e53e3e;
        font-size: 0.875rem;
        margin-top: 5px;
        display: block;
    }
</style>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private CreateAccount createAccount { get; set; } = new CreateAccount();

    private bool showPassword = false;
    private bool showSuccess = false;
    private string errorMessage = string.Empty;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            errorMessage = string.Empty;
            StateHasChanged();

            var result = await AccountService.SignUp(createAccount);

            if (result != null)
            {
                showSuccess = true;
                StateHasChanged();

                // Đợi 2 giây để user thấy thông báo thành công
                await Task.Delay(2000);

                HttpContext.Response.Redirect("/Account/Login");
            }
            else
            {
                errorMessage = "Failed to create account. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred during sign up. Please try again.";
            Console.WriteLine("Error during sign up: " + ex.Message);
        }
        finally
        {
            StateHasChanged();
        }
    }
}